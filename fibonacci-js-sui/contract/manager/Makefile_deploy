# TODO: for non-local deployment, we should load env into system directly instead of using .env file explicitly
ifneq (,$(wildcard .env))
    include .env
    export
endif

# AWS Configuration
AWS_REGION = us-east-1

# Configuration file path
NETWORKS_CONFIG := config/networks.json

# Network parameter
network ?=

# Get network configuration
CHAIN_ID := $(shell jq -r '.networks.$(network).chain_id' $(NETWORKS_CONFIG))
CHAIN_RPC := $(shell jq -r '.networks.$(network).rpc_url' $(NETWORKS_CONFIG))
CHAIN_SECRET := $(shell jq -r '.networks.$(network).secrets.secret_name' $(NETWORKS_CONFIG))
CHAIN_EXPLORER_API := $(shell jq -r '.networks.$(network).explorer_api' $(NETWORKS_CONFIG))
CHAIN_EXPLORER_BROWSER := $(shell jq -r '.networks.$(network).explorer_browser' $(NETWORKS_CONFIG))

# Get secret key mappings
PROXY_ADMIN_PRIVATE_KEY_SM_KEY := $(shell jq -r '.networks.$(network).secrets.secret_keys_mapping.proxy_admin_private_key' $(NETWORKS_CONFIG))
CONTRACT_OWNER_PRIVATE_KEY_SM_KEY := $(shell jq -r '.networks.$(network).secrets.secret_keys_mapping.contract_owner_private_key' $(NETWORKS_CONFIG))

# Load private keys from AWS Secrets Manager
load-secrets:
	@echo "Loading secrets from AWS Secrets Manager..."
	@if [ "$(network)" = "" ]; then \
		echo "Error: network must be specified"; \
		exit 1; \
	fi
	@SECRETS=$$(aws secretsmanager get-secret-value \
		--secret-id $(CHAIN_SECRET) \
		--query 'SecretString' \
		--output text); \
	echo "PROXY_ADMIN_PRIVATE_KEY=$$(echo $$SECRETS | jq -r '.$(PROXY_ADMIN_PRIVATE_KEY_SM_KEY)')" >> .env; \
	echo "CONTRACT_OWNER_PRIVATE_KEY=$$(echo $$SECRETS | jq -r '.$(CONTRACT_OWNER_PRIVATE_KEY_SM_KEY)')" >> .env

# Generate .env file
generate-env:
	@if [ "$(network)" != "" ]; then \
		echo "# Network Configuration" > .env; \
		echo "CHAIN_RPC=$$(jq -r '.networks.$(network).rpc_url' $(NETWORKS_CONFIG))" >> .env; \
		echo "CHAIN_ID=$$(jq -r '.networks.$(network).chain_id' $(NETWORKS_CONFIG))" >> .env; \
		echo "CHAIN_EXPLORER_API=$$(jq -r '.networks.$(network).explorer_api' $(NETWORKS_CONFIG))" >> .env; \
		echo "CHAIN_EXPLORER_BROWSER=$$(jq -r '.networks.$(network).explorer_browser' $(NETWORKS_CONFIG))" >> .env; \
		echo "" >> .env; \
		echo "# AWS Configuration" >> .env; \
		echo "AWS_REGION=us-east-1" >> .env; \
	else \
		echo "Error: network must be specified"; \
		exit 1; \
	fi

# Check required environment variables
check-env: generate-env load-secrets
	@if [ "$(network)" = "" ]; then \
		echo "Error: network must be specified"; \
		exit 1; \
	fi
	@if [ "$(CHAIN_ID)" = "" ]; then \
		echo "Error: Network $(network) not configured in networks.json"; \
		exit 1; \
	fi
	@if [ ! -f .env ]; then \
		echo "Error: .env file not generated"; \
		exit 1; \
	fi

# Export Hardhat configuration
export-hardhat-config:
	@echo "Exporting Hardhat configuration..."
	@echo "Network: $(network)"
	export CHAIN_RPC=$(CHAIN_RPC); \
	export CHAIN_ID=$(CHAIN_ID); \
	export CHAIN_EXPLORER_API=$(CHAIN_EXPLORER_API); \
	export CHAIN_EXPLORER_BROWSER=$(CHAIN_EXPLORER_BROWSER); \
	export PROXY_ADMIN_PRIVATE_KEY=$(PROXY_ADMIN_PRIVATE_KEY); \
	export CONTRACT_OWNER_PRIVATE_KEY=$(CONTRACT_OWNER_PRIVATE_KEY)

# Deployment targets
deploy-outpost: check-env
	@if [ "$(network)" = "" ]; then \
		echo "Error: network must be specified for deploy-outpost"; \
		exit 1; \
	fi
	@echo "Deploying Outpost to $(network)..."
	npx hardhat ignition deploy ignition/modules/OutpostProxy.ts --network chain

deploy-manager: check-env
	@if [ "$(network)" = "" ]; then \
		echo "Error: network must be specified for deploy-manager"; \
		exit 1; \
	fi
	@echo "Deploying Manager to $(network)..."
	npx hardhat ignition deploy ignition/modules/ManagerProxy.ts --network chain

deploy-app: check-env
	@if [ "$(network)" = "" ]; then \
		echo "Error: network must be specified for deploy-app"; \
		exit 1; \
	fi
	@echo "Deploying APP to network: $(network) with outpost: $(outpost)"
	OUTPOST_PROXY_CONTRACT=$(outpost) npx hardhat ignition deploy \
		ignition/modules/APP.ts \
		--network chain

# TODO: verify this command
upgrade-outpost: check-env
	@if [ "$(network)" = "" ]; then \
		echo "Error: network must be specified for upgrade-outpost"; \
		exit 1; \
	fi
	@echo "Upgrading Outpost on $(network)..."
	npx hardhat ignition deploy ignition/modules/OutpostUpgrade.ts --network chain

# TODO: verify this command
upgrade-manager: check-env
	@if [ "$(network)" = "" ]; then \
		echo "Error: network must be specified for upgrade-manager"; \
		exit 1; \
	fi
	@echo "Upgrading Manager on $(network)..."
	npx hardhat ignition deploy ignition/modules/ManagerUpgrade.ts --network chain

register-app: check-env
	@if [ "$(network)" = "" ]; then \
		echo "Error: network must be specified for register-app"; \
		exit 1; \
	fi
	@echo "Registering app on $(network)..." 
	cast send $(outpost) \
		--private-key ${CONTRACT_OWNER_PRIVATE_KEY} \
		--rpc-url ${CHAIN_RPC} \
		"registerAPP(address,uint,string,string)" \
		$(app) 2 $(docker-uri) $(docker-hash)

approve-app: check-env
	@if [ "$(network)" = "" ]; then \
		echo "Error: network must be specified for register-app"; \
		exit 1; \
	fi
	@echo "Approving app on $(network)..."
	cast send $(outpost) \
		--private-key ${CONTRACT_OWNER_PRIVATE_KEY} \
		--rpc-url ${CHAIN_RPC} \
		"approveAPP(address)" $(app)

# TODO: verify this command
set-approver: check-env
	@if [ "$(network)" = "" ]; then \
		echo "Error: network must be specified for set-approver"; \
		exit 1; \
	fi
	@echo "Setting approver on $(network)..."
	cast send ${OUTPOST_PROXY_CONTRACT} \
		--private-key ${CONTRACT_OWNER_PRIVATE_KEY} \
		--rpc-url ${CHAIN_RPC} \
		--network chain \
		"setApprover(address,bool)" ${APP_APPROVER} true

set-outpost-bridge: check-env
	@if [ "$(network)" = "" ]; then \
		echo "Error: network must be specified for set-bridge"; \
		exit 1; \
	fi
	@echo "Setting bridge on $(network)..."
	@echo "Setting bridge address for Outpost..."
	cast send $(outpost) \
		--private-key ${CONTRACT_OWNER_PRIVATE_KEY} \
		--rpc-url ${CHAIN_RPC} \
		"setBridge(address,bool)" $(bridge-operator) true

set-manager-bridge: check-env
	@if [ "$(network)" = "" ]; then \
		echo "Error: network must be specified for set-bridge"; \
		exit 1; \
	fi
	@echo "Setting bridge on $(network)..."
	@echo "Setting bridge address for Manager..."
	cast send $(manager) \
		--private-key ${CONTRACT_OWNER_PRIVATE_KEY} \
		--rpc-url ${CHAIN_RPC} \
		"setBridge(address,bool)" \
		$(bridge-operator) true

# TODO: verify this command
clear: check-env
	@if [ "$(network)" = "" ]; then \
		echo "Error: network must be specified for clear"; \
		exit 1; \
	fi
	@echo "Clearing on $(network)..."
	cast send ${MANAGER_PROXY_CONTRACT} \
		--private-key ${CONTRACT_OWNER_PRIVATE_KEY} \
		--rpc-url ${CHAIN_RPC} \
		--network chain \
		"clear()"

# TODO: verify this command
unregister-app: check-env
	@if [ "$(network)" = "" ]; then \
		echo "Error: network must be specified for unregister-app"; \
		exit 1; \
	fi
	@echo "Unregistering app on $(network)..."
	cast send ${MANAGER_PROXY_CONTRACT} \
		--private-key ${CONTRACT_OWNER_PRIVATE_KEY} \
		--rpc-url ${CHAIN_RPC} \
		--network chain \
		"unregisterSession(string[])" \
		["3.236.119.84:30000","3.236.119.84:30001","3.236.119.84:30002","3.236.119.84:30003","3.236.119.84:30004"]

# TODO: verify this command
verify: check-env
	@if [ "$(network)" = "" ]; then \
		echo "Error: network must be specified for verify"; \
		exit 1; \
	fi
	@echo "Verifying contracts on $(network)..."
	npx hardhat verify --network chain $(contract)

# TODO: verify this command
# Show current configuration
show-config:
	@echo "Current configuration:"
	@if [ "$(network)" != "" ]; then \
		echo "Network: $(network)"; \
		echo "Chain ID: $(CHAIN_ID)"; \
		echo "RPC URL: $(CHAIN_RPC)"; \
		echo "Explorer API: $(CHAIN_EXPLORER_API)"; \
		echo "Explorer Browser: $(CHAIN_EXPLORER_BROWSER)"; \
	else \
		echo "Error: network must be specified"; \
		exit 1; \
	fi

clean:
	@echo "Cleaning build files..."
	rm -rf cache
	rm -rf artifacts
	rm -rf typechain
	rm -rf typechain-types
	rm -f .env

.PHONY: deploy-outpost deploy-manager upgrade-outpost upgrade-manager \
	register-app set-approver set-bridge clear unregister-app verify clean \
	check-env show-config export-hardhat-config
